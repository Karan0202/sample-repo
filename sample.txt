import { Badges, TableRows, TableRowsGrayText } from 'components/UIComponents/CustomComponents';
import React from 'react';
import { Menu, Transition } from '@headlessui/react';
import { Fragment } from 'react';

const members = [
  {
    name: 'Dries Vincent',
    handle: 'driesvincent',
    imageUrl:
      'https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'
  },
  {
    name: 'Lindsay Walton',
    handle: 'lindsaywalton',
    imageUrl:
      'https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80'
  }
];
const totalMembers = 5;

function EditActiveIcon(props: any) {
  return (
    <svg {...props} viewBox="0 0 20 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M9.155 2.488l2.357 2.357-2.357-2.357zm1-1a1.667 1.667 0 112.357 2.357l-9.179 9.179H1v-2.381l9.155-9.155v0z"
        stroke="#4A5568"
        strokeWidth="2"
      />
    </svg>
  );
}
// const Ring = styled.div`{

// }`;

function EditInactiveIcon(props: any) {
  return (
    <svg {...props} viewBox="0 0 20 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M9.155 2.488l2.357 2.357-2.357-2.357zm1-1a1.667 1.667 0 112.357 2.357l-9.179 9.179H1v-2.381l9.155-9.155v0z"
        stroke="#4A5568"
        strokeWidth="2"
      />
    </svg>
  );
}

function DuplicateInactiveIcon(props: any) {
  return (
    <svg {...props} viewBox="0 0 20 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M1 1l8 8M1 9l8-8-8 8z" stroke="#4A5568" strokeWidth="2" />
    </svg>
  );
}

function DuplicateActiveIcon(props: any) {
  return (
    <svg {...props} viewBox="0 0 20 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M1 1l8 8M1 9l8-8-8 8z" stroke="#4A5568" strokeWidth="2" />
    </svg>
  );
}

function ArchiveInactiveIcon(props: any) {
  return (
    <svg {...props} viewBox="0 0 20 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M5 4.333h4m-3.333 0a2 2 0 110 4H5l2 2m-2-4h4M13 7A6 6 0 11.999 7 6 6 0 0113 7z"
        stroke="#4A5568"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

function ArchiveActiveIcon(props: any) {
  return (
    <svg {...props} viewBox="0 0 20 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M5 4.333h4m-3.333 0a2 2 0 110 4H5l2 2m-2-4h4M13 7A6 6 0 11.999 7 6 6 0 0113 7z"
        stroke="#4A5568"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}

function MoveInactiveIcon(props: any) {
  return (
    <svg {...props} viewBox="0 0 20 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1.667 9.667v.666a2 2 0 002 2h6.666a2 2 0 002-2v-.666M9.667 7L7 9.667m0 0L4.333 7M7 9.667v-8"
        stroke="#4A5568"
        strokeWidth="2"
      />
    </svg>
  );
}

function MoveActiveIcon(props: any) {
  return (
    <svg {...props} viewBox="0 0 20 10" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1.667 9.667v.666a2 2 0 002 2h6.666a2 2 0 002-2v-.666M9.667 7L7 9.667m0 0L4.333 7M7 9.667v-8"
        stroke="#4A5568"
        strokeWidth="2"
      />
    </svg>
  );
}

// function DeleteInactiveIcon(props: any) {
//   return (
//     <svg {...props} viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
//       <rect x="5" y="6" width="10" height="10" fill="#EDE9FE" stroke="#A78BFA" strokeWidth="2" />
//       <path d="M3 6H17" stroke="#A78BFA" strokeWidth="2" />
//       <path d="M8 6V4H12V6" stroke="#A78BFA" strokeWidth="2" />
//     </svg>
//   );
// }

// function DeleteActiveIcon(props: any) {
//   return (
//     <svg {...props} viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
//       <rect x="5" y="6" width="10" height="10" fill="#8B5CF6" stroke="#C4B5FD" strokeWidth="2" />
//       <path d="M3 6H17" stroke="#C4B5FD" strokeWidth="2" />
//       <path d="M8 6V4H12V6" stroke="#C4B5FD" strokeWidth="2" />
//     </svg>
//   );
// }

function OrderTableItem(props: any) {
  return (
    <tr>
      <td className="px-2 first:pl-5 last:pr-5 py-3 whitespace-nowrap w-px">
        <div className="flex items-center ">
          <label className="inline-flex ml-3 ">
            <span className="sr-only">Select</span>
            <input
              id={props.customer.id}
              className="form-checkbox rounded"
              type="checkbox"
              onChange={props.handleClick}
              checked={props.isChecked}
            />
          </label>
        </div>
      </td>
      <td className="px-2 first:pl-5 last:pr-5 whitespace-nowrap "></td>
      <TableRows className="">
        {/* <div className="text-left">{props.customer.Order}</div> */}
        
        <div className="text-left">{props.customer.order_items.order_id}</div>
      </TableRows>
      <TableRows className="">
        <div className="text-left">
          <div className="flex items-center space-x-2">
            <div className="flex flex-shrink-0 -space-x-1">
              {members.map((member) => (
                <img
                  key={member.handle}
                  className="max-w-none h-6 w-6 rounded-full ring-1 ring-gray-600"
                  src={member.imageUrl}
                  alt={member.name}
                />
              ))}
            </div>
            {totalMembers > members.length ? (
              <span className="flex-shrink-0 text-xs leading-5 font-medium">
                +{totalMembers - members.length}
              </span>
            ) : null}
          </div>
        </div>
      </TableRows>
      <TableRows>
        {/* <div className="text-left">{props.customer.name}</div> */}
        <div className="text-left">{props.customer.user.first_name+" "+props.customer.user.last_name}</div> 
      </TableRows>
      <TableRowsGrayText>
        {/* <div className="text-left">{props.customer.OrderPlacedAt}</div> */}
        <div className="text-left">{props.customer.delivery_address.city}</div>
      </TableRowsGrayText>
      <TableRowsGrayText>
        {/* <div>{props.customer.City}</div> */}
        <div>{props.customer.delivery_address.city}</div>
      </TableRowsGrayText>
      <TableRowsGrayText>
        {/* <div className="text-left">{props.customer.Country}</div> */}
        <div className="text-left">{props.customer.delivery_address.country}</div>
      </TableRowsGrayText>
      <TableRowsGrayText>
        <Badges className="text-left font-medium ">
          <span className="px-3 inline-flex text-xs leading-5 font-medium rounded  ">
            {/* {props.customer.Status} */}
            {props.customer.order_status.name}
            
          </span>
        </Badges>
      </TableRowsGrayText>
      <TableRowsGrayText>
        {/* <div className="text-left">{props.customer.Amount}</div> */}
        {/*props.customer.discount_total || props.customer.grand_total */}
        <div className="text-left">{props.customer.discount_total}</div>
      </TableRowsGrayText>
      <TableRowsGrayText className="px-2 first:pl-5 last:pr-5 py-2 whitespace-nowrap w-px">
        {/* Menu button */}
        <button className="mr-6 hover:text-gray-500 rounded-full ">
          <Menu as="div" className="relative inline-block text-left">
            {({ open }) => (
              <>
                <Menu.Button>
                  <svg width="4" height="18" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M1.293 2.707a1 1 0 101.414-1.414 1 1 0 00-1.414 1.414zM1.293 9.707a1 1 0 101.414-1.414 1 1 0 00-1.414 1.414zM1.293 16.707a1 1 0 101.414-1.414 1 1 0 00-1.414 1.414z"
                      stroke="#4A5568"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                </Menu.Button>

                <Transition
                  show={open}
                  as={Fragment}
                  enter="transition ease-out duration-100"
                  enterFrom="transform opacity-0 scale-95"
                  enterTo="transform opacity-100 scale-100"
                  leave="transition ease-in duration-75"
                  leaveFrom="transform opacity-100 scale-100"
                  leaveTo="transform opacity-0 scale-95"
                >
                  <Menu.Items
                    static
                    className="absolute right-0 w-46  z-20 mt-2 p-1  origin-top-right bg-white border border-gray-200 rounded-md shadow-lg ring-1 ring-gray-200 ring-opacity-5 focus:outline-none"
                  >
                    <Menu.Item>
                      {({ active }) => (
                        <button
                          className={`${
                            active ? 'bg-violet-500 bg-gray-100' : 'text-gray-900'
                          } group flex rounded-md items-center px-2 py-2 mr-8 w-full  text-sm`}
                        >
                          {active ? (
                            <EditActiveIcon className="w-5 h-5 mr-2" aria-hidden="true" />
                          ) : (
                            <EditInactiveIcon className="w-5 h-5 mr-2" aria-hidden="true" />
                          )}
                          Edit Shipment
                        </button>
                      )}
                    </Menu.Item>
                    <Menu.Item>
                      {({ active }) => (
                        <button
                          className={`${
                            active ? 'bg-violet-500 bg-gray-100' : 'text-gray-900'
                          } group flex rounded-md items-center w-full px-2 py-2 text-sm`}
                        >
                          {active ? (
                            <DuplicateActiveIcon className="w-5 h-5 mr-2" aria-hidden="true" />
                          ) : (
                            <DuplicateInactiveIcon className="w-5 h-5 mr-2" aria-hidden="true" />
                          )}
                          Cancel
                        </button>
                      )}
                    </Menu.Item>

                    <Menu.Item>
                      {({ active }) => (
                        <button
                          className={`${
                            active ? 'bg-violet-500 bg-gray-100' : 'text-gray-900'
                          } group flex rounded-md items-center w-full px-2 py-2 text-sm`}
                        >
                          {active ? (
                            <ArchiveActiveIcon className="w-5 h-5 mr-2" aria-hidden="true" />
                          ) : (
                            <ArchiveInactiveIcon className="w-5 h-5 mr-2" aria-hidden="true" />
                          )}
                          Refund
                        </button>
                      )}
                    </Menu.Item>
                    <Menu.Item>
                      {({ active }) => (
                        <button
                          className={`${
                            active ? 'bg-violet-500 bg-gray-100' : 'text-gray-900'
                          } group flex rounded-md items-center w-full px-2 py-2 text-sm`}
                        >
                          {active ? (
                            <MoveActiveIcon className="w-5 h-5 mr-2" aria-hidden="true" />
                          ) : (
                            <MoveInactiveIcon className="w-5 h-5 mr-2" aria-hidden="true" />
                          )}
                          Download Invoice
                        </button>
                      )}
                    </Menu.Item>

                    {/* <div className="px-1 py-1">
                      <Menu.Item>
                        {({ active }) => (
                          <button
                            className={`${
                              active ? 'bg-violet-500 text-white' : 'text-gray-900'
                            } group flex rounded-md items-center w-full px-2 py-2 text-sm`}
                          >
                            {active ? (
                              <DeleteActiveIcon
                                className="w-5 h-5 mr-2 text-violet-400"
                                aria-hidden="true"
                              />
                            ) : (
                              <DeleteInactiveIcon
                                className="w-5 h-5 mr-2 text-violet-400"
                                aria-hidden="true"
                              />
                            )}
                            Delete
                          </button>
                        )}
                      </Menu.Item>
                    </div> */}
                  </Menu.Items>
                </Transition>
              </>
            )}
          </Menu>
        </button>
      </TableRowsGrayText>
    </tr>
  );
}

export default OrderTableItem;
